makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(matrix) {
m <<- matrix
i <<- NULL
}
get <- function() {
m
}
setInverse <- function(inverse) {
i <<- inverse
}
getInverse <- function() {
i
}
list (set =set, get= get,
setInverse=setInverse,
getInverse=getInverse)
}
## Return cached solution, or create new cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
if(!is.null(m)) {
message("getting cached solution")
return(m)
}
data <- x$get()
m<-solve(data)
x$setInverse(m)
m
}
makeCacheMatrix$list
list
x$list
x=rbind(c(1,-1/4),c(-1/4,1))
x
m=makeCacheMatrix(x)
m
m$get()
cacheSolve(m)
m
makeCacheMatrix <- function(m = matrix()) {
i <- NULL
set <- function(matrix) {
m <<- matrix
i <<- NULL
}
get <- function() {
m
}
setInverse <- function(inverse) {
i <<- inverse
}
getInverse <- function() {
i
}
list (set =set, get= get,
setInverse=setInverse,
getInverse=getInverse)
}
x=rbind(c(1,-1/4),c(-1/4,1))
m=makeCacheMatrix(x)
m
m$get()
cacheSolve(m)
cacheSolve(m)
